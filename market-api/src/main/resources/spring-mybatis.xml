<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-2.0.xsd  
                        http://www.springframework.org/schema/mvc      
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
                        
    <context:annotation-config/>
                          
    <!-- 自动扫描 -->
    <context:component-scan base-package="com.duolanjian.java.market" >
    	<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/> -->
    </context:component-scan> 
    
    <!-- 启用AspectJ对Annotation的支持 -->         
    <aop:aspectj-autoproxy proxy-target-class="true">
    	<aop:include name="indexAspect" />
    </aop:aspectj-autoproxy>
    
    <bean id="indexAspect" class="com.duolanjian.java.market.aspect.IndexAspect"/>
    
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer" name="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:market.properties" />
    </bean> 
    
    <bean id="dataSourceCore" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"
    primary="true" depends-on="propertyConfigurer">  
        <property name="driverClass" value="${core.driver}" />  
        <property name="jdbcUrl" value="${core.url}" />  
        <property name="user" value="${core.username}" />  
        <property name="password" value="${core.password}" />  

        <property name="minPoolSize" value="5"></property>  
        <property name="initialPoolSize" value="5"></property>  
        <property name="acquireIncrement" value="1"></property>  
        <property name="maxPoolSize" value="30"></property>  
        <property name="maxIdleTime" value="60"></property>  
    </bean>
    
    <bean id="dataSourceLog" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"
    primary="false" depends-on="propertyConfigurer" >  
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>  
        <property name="jdbcUrl" value="jdbc:mysql://123.57.141.203:3306/eagle_log" />  
        <property name="user" value="root" />  
        <property name="password" value="root" />  
		
		<property name="minPoolSize" value="5"></property>  
        <property name="initialPoolSize" value="5"></property>  
        <property name="acquireIncrement" value="1"></property>  
        <property name="maxPoolSize" value="30"></property>  
        <property name="maxIdleTime" value="60"></property>
    </bean>
    
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactoryCore" class="org.mybatis.spring.SqlSessionFactoryBean" >  
        <property name="dataSource" ref="dataSourceCore" />
        <property  name="configLocation" value="classpath:mybatis.xml"/>
        <!-- 自动扫描mapping.xml文件 -->  
		<!-- <property name="mapperLocations" value="classpath:mapper/*.xml"></property> -->
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.duolanjian.java.market.mapper" /> 
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryCore"></property>  
    </bean>  
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManagerCore"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSourceCore" />  
    </bean>
    
    <bean id="sqlSessionFactoryLog" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <qualifier type="org.springframework.beans.factory.annotation.Qualifier" value="dataSourceLog"/>
        <property  name="configLocation" value="classpath:mybatislog.xml"/>
        <property name="dataSource" ref="dataSourceLog" />  
    </bean>  

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <qualifier type="org.springframework.beans.factory.annotation.Qualifier" value="sqlSessionFactoryLog"/>
        <property name="basePackage" value="com.duolanjian.java.market.mapperlog" /> 
        <property name="sqlSessionFactory" ref="sqlSessionFactoryLog"></property>  
    </bean>  
  
    <bean id="transactionManagerLog"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSourceLog" />  
    </bean>
</beans>  